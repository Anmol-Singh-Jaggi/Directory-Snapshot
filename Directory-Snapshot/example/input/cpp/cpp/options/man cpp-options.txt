-Wall -Wextra -Wfatal-errors -Wunreachable-code -Wfloat-equal -Winline -Wshadow -Wredundant-decls -Wcast-qual -Wcast-align -Wlogical-op -pedantic -Winvalid-pch
-std=c++14
-pipe

											Useful Options -:

-Wall
    All of the above `-W' options combined. 

-Wextra
	This enables some extra warning flags that are not enabled by -Wall.

-Wfatal-errors
  This option causes the compiler to abort compilation on the first error occurred rather than trying to keep going and printing further error messages.
	
-Wunreachable-code
    Warn if the compiler detects that code will never be executed.

-Wfloat-equal
    Warn if floating point values are used in equality comparisons.
	
-Winline
    Warn if a function that is declared as inline cannot be inlined.

-Wshadow
    Warn whenever a local variable shadows another local variable, parameter or global variable or whenever a built-in function is shadowed. 

-Wredundant-decls
    Warn if anything is declared more than once in the same scope, even in cases where multiple declaration is valid and changes nothing. 

-Wcast-qual
    Warn whenever a pointer is cast so as to remove a type qualifier from the target type. For example, warn if a const char * is cast to an ordinary char *.
    Also warn when making a cast that introduces a type qualifier in an unsafe way. For example, casting char ** to const char ** is unsafe, as in this example:

                /* p is char ** value.  */
                const char **q = (const char **) p;
                /* Assignment of readonly string to const char * is OK.  */
                *q = "string";
                /* Now char** pointer points to read-only memory.  */
                **p = 'b';

-Wcast-align
   Warn whenever a pointer is cast such that the required alignment of the target is increased. For example, warn if a char * is cast to an int * on machines where integers can only be accessed at two- or four-byte boundaries.

-Wzero-as-null-pointer-constant (C++ and Objective-C++ only)
    Warn when a literal '0' is used as null pointer constant. This can be useful to facilitate the conversion to nullptr in C++11. 

-Wconversion
    Warn for implicit conversions that may alter a value. This includes conversions between real and integer, like abs (x) when x is double; conversions between signed and unsigned, like unsigned ui = -1; and conversions to smaller types, like sqrtf (M_PI). Do not warn for explicit casts like abs ((int) x) and ui = (unsigned) -1, or if the value is not changed by the conversion like in abs (2.0). Warnings about conversions between signed and unsigned integers can be disabled by using -Wno-sign-conversion.
    For C++, also warn for confusing overload resolution for user-defined conversions; and conversions that never use a type conversion operator: conversions to void, the same type, a base class or a reference to them. Warnings about conversions between signed and unsigned integers are disabled by default in C++ unless -Wsign-conversion is explicitly enabled. 

-Wundef
    Warn if an undefined identifier is evaluated in an #if directive. 

-Wlogical-op
    Warn about suspicious uses of logical operators in expressions. This includes using logical operators in contexts where a bit-wise operator is likely to be expected. 
		
-pedantic
    Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++.
	For ISO C, follows the version of the ISO C standard specified by any `-std' option used. 

-std=c++11
	Enables C++ 11 standard.

-include Debug.h
	Includes <Debug.h>.

-Dmacro
    Define macro macro with the string `1' as its definition.

-Dmacro=defn
    Define macro macro as defn. All instances of `-D' on the command line are processed before any `-U' options.
		
-Umacro
    Undefine macro macro. `-U' options are evaluated after all `-D' options, but before any `-include' and `-imacros' options.
	
-E
    Run only the C preprocessor. Preprocess all the C source files specified and output the results to standard output or to the specified output file.

-C
    Tell the preprocessor not to discard comments. Used with the `-E' option.

-P
    Tell the preprocessor not to generate `#line' directives. Used with the `-E' option. 

-dM
    Tell the preprocessor to output only a list of the macro definitions that are in effect at the end of preprocessing.
	Used with the `-E' option.

-dD
    Tell the preprocessing to pass all macro definitions into the output, in their proper sequence in the rest of the output.
	Used with the `-E' option.

-dN
    Like `-dD' except that the macro arguments and contents are omitted. Only `#define name' is included in the output.
	Used with the `-E' option.

-dI
    Output `#include' directives in addition to the result of preprocessing.
	Used with the `-E' option.

-c
    Compile or assemble the source files, but do not link. The linking stage simply is not done.
	The ultimate output is in the form of an object file for each source file.
    By default, the object file name for a source file is made by replacing the suffix `.c', `.i', `.s', etc., with `.o'.
    Unrecognized input files, not requiring compilation or assembly, are ignored.

-S
    Stop after the stage of compilation proper; do not assemble.
	The output is in the form of an assembler code file for each non-assembler input file specified.
    By default, the assembler file name for a source file is made by replacing the suffix `.c', `.i', etc., with `.s'.
    Input files that don't require compilation are ignored.

-E
    Stop after the preprocessing stage; do not run the compiler proper.
	The output is in the form of preprocessed source code, which is sent to the standard output.
    Input files which don't require preprocessing are ignored.

-o file
    Place output in file file. This applies regardless to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code.
    Since only one output file can be specified, it does not make sense to use `-o' when compiling more than one input file, unless you are producing an executable file as output.
    If `-o' is not specified, the default is to put an executable file in `a.out', the object file for `source.suffix' in `source.o', its assembler file in `source.s', and all preprocessed C source on standard output.

-v
    Print (on standard error output) the commands executed to run the stages of compilation.
	Also print the version number of the compiler driver program and of the preprocessor and the compiler proper.

--target-help
    Print (on the standard output) a description of target specific command line options for each tool.
 
 
@file
    Read command-line options from file. The options read are inserted in place of the original @file option. If file does not exist, or cannot be read, then the option will be treated literally, and not removed.
    Options in file are separated by whitespace. A whitespace character may be included in an option by surrounding the entire option in either single or double quotes. Any character (including a backslash) may be included by prefixing the character to be included with a backslash. The file may itself contain additional @file options; any such options will be processed recursively. 
	
-Idir
    Add the directory dir to the head of the list of directories to be searched for header files. 
	This can be used to override a system header file, substituting your own version, since these directories are searched before the system header file directories. 
	However, you should not use this option to add directories that contain vendor-supplied system header files (use `-isystem' for that).
	If you use more than one `-I' option, the directories are scanned in left-to-right order; the standard system directories come after. 

-Q
    Makes the compiler print out each function name as it is compiled, and print some statistics about each pass when it finishes.

-ftime-report
    Makes the compiler print some statistics about the time consumed by each pass when it finishes.

-fmem-report
    Makes the compiler print some statistics about permanent memory allocation when it finishes.
	
-fstats
    Emit statistics about front-end processing at the end of the compilation.
	This information is generally only useful to the G++ development team. 
	
-save-temps
    Store the usual "temporary" intermediate files permanently; place them in the current directory and name them based on the source file. 
	Thus, compiling `foo.c' with `-c -save-temps' would produce files `foo.i' and `foo.s', as well as `foo.o'.
	This creates a preprocessed `foo.i' output file even though the compiler now normally uses an integrated preprocessor.

-time
    Report the CPU time taken by each subprocess in the compilation sequence. 
	For C source files, this is the compiler proper and assembler (plus the linker if linking is done).
	The output looks like this:
    # cc1 0.12 0.01
    # as 0.00 0.01
    The first number on each line is the "user time," that is time spent executing the program itself.
	The second number is "system time," time spent executing operating system routines on behalf of the program.
	Both numbers are in seconds. 
